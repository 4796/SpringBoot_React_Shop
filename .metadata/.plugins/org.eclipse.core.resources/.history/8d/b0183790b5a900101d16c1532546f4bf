package com.example.Shop.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.Shop.converter.impl.ClientConverterDtoEntity;
import com.example.Shop.converter.impl.WorkerConverterDtoEntity;
import com.example.Shop.dto.ClientDTO;
import com.example.Shop.dto.WorkerDTO;
import com.example.Shop.model.Worker;
import com.example.Shop.service.AuthService;
import com.example.Shop.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.Valid;


@RestController
@CrossOrigin
@RequestMapping("/worker")
public class WorkerController {
	@Autowired
	UserService userService;
	
	@Autowired
	AuthService authService;
	
	@Autowired
	ClientConverterDtoEntity clientConverter;
	@Autowired
	WorkerConverterDtoEntity workerConverter;
	
	
	//worker   da
		@PostMapping("/add")
		public ResponseEntity<?> newWorker(@Valid @RequestBody WorkerDTO dto, @RequestHeader("Authorization") String token) throws Exception{
			Worker worker=null;
			try {
				worker=workerConverter.toEntity(dto);
				String usernameAndRole = authService.validateTokenAndGetUsernameAndRole(token); // Proverava token
				String username=usernameAndRole.split(",")[0];
				String role=usernameAndRole.split(",")[1]; 
		        if (username == null || !role.equals("w")) {
		        	return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		        }
			} catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
			}
			
			
			Worker w=userService.addWorker(worker);

			return  new ResponseEntity<>(HttpStatus.CREATED);//success		
			
				
		}
		
		
		
		//worker     da
		@PutMapping("/update")//samog sebe moze da menja, da bi radilo ovo za autentifikaciju
		public ResponseEntity<?> updateWorker(@Valid @RequestBody WorkerDTO dto, @RequestHeader("Authorization") String token) throws Exception{
			String usernameAndRole = authService.validateTokenAndGetUsernameAndRole(token); // Proverava token
			String username=usernameAndRole.split(",")[0];
			String role=usernameAndRole.split(",")[1]; 
	        if (username == null || !username.equals(dto.getUsername())|| !role.equals("w")) {
	        	return new ResponseEntity<>(HttpStatus.UNAUTHORIZED); 
	        }
	        
	        Worker worker=workerConverter.toEntity(dto);
			Worker w=userService.updateWorker(worker);
			
			return  new ResponseEntity<>(w, HttpStatus.CREATED);//success
		}
		
		//worker
		@DeleteMapping("/delete")//samog sebe moze da menja, da bi radilo ovo za autentifikaciju
		public ResponseEntity<?> deleteWorker(@RequestBody String worker, @RequestHeader("Authorization") String token) throws Exception{
			worker=worker.substring(1, worker.length()-1);
			String usernameAndRole = authService.validateTokenAndGetUsernameAndRole(token); // Proverava token
			String username=usernameAndRole.split(",")[0]; 
	        if (username == null || !username.equals(worker)) {
	        	return new ResponseEntity<>(HttpStatus.UNAUTHORIZED); 
	        }
	        
			String w=userService.deleteWorker(worker);
			if(w==null)
				return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
			else 
				return  new ResponseEntity<>(HttpStatus.OK);//success
		}
		
		//worker     da
		@GetMapping("/all")
		public ResponseEntity<?> workerList(@RequestHeader("Authorization") String token) throws Exception{
			String username = authService.validateTokenAndGetUser(token); 
	        if (username == null) {
	        	return new ResponseEntity<>(HttpStatus.UNAUTHORIZED); 
	        }
	        
			List<Worker> l=userService.workerList();
			if(l==null)
				return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
			else 
				return  new ResponseEntity<>(l, HttpStatus.OK);//success
		}
}
